(
  (* Main example *)
  (
    fun (Pair : forall (A : Type@0) (B : Type@0) -> Type@1)
        (pair : forall (A : Type@0) (B : Type@0) (a : A) (b : B) -> Pair A B)
        (fstP : forall (A : Type@0) (B : Type@0) (p : Pair A B) -> A)
        (sndP : forall (A : Type@0) (B : Type@0) (p : Pair A B) -> B) ->
      (
        fun (p : Pair Nat (forall (x : Nat) -> Nat)) ->
          sndP Nat (forall (x : Nat) -> Nat) p
            (fstP Nat (forall (x : Nat) -> Nat) p)
      )
      (pair Nat (forall (x : Nat) -> Nat) 3 (fun (x : Nat) -> succ (succ x)))
  )
  (* Church pair *)
  (fun (A : Type@0) (B : Type@0) -> forall (C : Type@0) (pair : forall (a : A) (b : B) -> C) -> C)
  (* Church pair constructor *)
  (fun (A : Type@0) (B : Type@0) (a : A) (b : B) (C : Type@0) (pair : forall (a : A) (b : B) -> C) -> pair a b)
  (* Church pair fstP *)
  (fun (A : Type@0) (B : Type@0) (p : forall (C : Type@0) (pair : forall (a : A) (b : B) -> C) -> C) -> p A (fun (a : A) (b : B) -> a))
  (* Church pair sndP *)
  (fun (A : Type@0) (B : Type@0) (p : forall (C : Type@0) (pair : forall (a : A) (b : B) -> C) -> C) -> p B (fun (a : A) (b : B) -> b))
) : Nat
