prog: INT COLON INT SUCC
##
## Ends in an error in state: 93.
##
## prog -> obj COLON obj . EOF [ # ]
##
## The known suffix of the stack is as follows:
## obj COLON obj
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 29, spurious reduction of production eq_obj -> app_obj
## In state 27, spurious reduction of production obj -> eq_obj
##

Either an expression or the end of file is expected.
This token is invalid for the beginning of an expression.

prog: RPAREN
##
## Ends in an error in state: 0.
##
## prog' -> . prog [ # ]
##
## The known suffix of the stack is as follows:
##
##

This token is invalid for the beginning of a program.

prog: TYPE ZERO
##
## Ends in an error in state: 3.
##
## atomic_obj -> TYPE . AT INT [ ZERO VAR TYPE RPAREN RETURN RANGLE NAT LPAREN INT EQ EOF END COLON BAR AS ]
##
## The known suffix of the stack is as follows:
## TYPE
##

"Type" requires "@<level>".

prog: TYPE AT ZERO
##
## Ends in an error in state: 4.
##
## atomic_obj -> TYPE AT . INT [ ZERO VAR TYPE RPAREN RETURN RANGLE NAT LPAREN INT EQ EOF END COLON BAR AS ]
##
## The known suffix of the stack is as follows:
## TYPE AT
##

"Type" requires "@?level", where "?level" is an arabic numeral.

prog: SUCC RPAREN
##
## Ends in an error in state: 6.
##
## obj -> SUCC . atomic_obj [ RPAREN RETURN RANGLE EOF END COLON BAR AS ]
##
## The known suffix of the stack is as follows:
## SUCC
##

An expression is expected after "succ".

prog: REC RPAREN
##
## Ends in an error in state: 13.
##
## obj -> REC . obj optional_as_nat RETURN VAR DOT obj BAR ZERO DARROW obj BAR SUCC VAR COMMA VAR DARROW obj END [ RPAREN RETURN RANGLE EOF END COLON BAR AS ]
## obj -> REC . obj AS LPAREN app_obj EQ LANGLE obj RANGLE app_obj RPAREN RETURN VAR VAR VAR DOT obj BAR REFL VAR DARROW obj END [ RPAREN RETURN RANGLE EOF END COLON BAR AS ]
##
## The known suffix of the stack is as follows:
## REC
##

A scrutinee expression is expected.
This token is invalid for the beginning of an expression.

prog: LAMBDA ZERO
##
## Ends in an error in state: 23.
##
## obj -> fnbinder . params ARROW obj [ RPAREN RETURN RANGLE EOF END COLON BAR AS ]
##
## The known suffix of the stack is as follows:
## fnbinder
##

"forall" requires a list of parenthesized parameters.
For example,
  "(x : Nat) (y : Nat)" in "forall (x : Nat) (y : Nat) -> Nat"

prog: LAMBDA LPAREN ZERO
##
## Ends in an error in state: 17.
##
## param -> LPAREN . VAR COLON obj RPAREN [ LPAREN DEF ARROW ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

A parameter should start with a valid identifier.

prog: LAMBDA LPAREN VAR ZERO
##
## Ends in an error in state: 18.
##
## param -> LPAREN VAR . COLON obj RPAREN [ LPAREN DEF ARROW ]
##
## The known suffix of the stack is as follows:
## LPAREN VAR
##

A parameter should have ": ?type" after the parameter name,
where "?type" is the type of the parameter.

prog: LAMBDA LPAREN VAR COLON RPAREN
##
## Ends in an error in state: 19.
##
## param -> LPAREN VAR COLON . obj RPAREN [ LPAREN DEF ARROW ]
##
## The known suffix of the stack is as follows:
## LPAREN VAR COLON
##

A parameter should have "?type" after ":",
where "?type" is the type of the parameter.

prog: LPAREN RPAREN
##
## Ends in an error in state: 8.
##
## atomic_obj -> LPAREN . obj RPAREN [ ZERO VAR TYPE RPAREN RETURN RANGLE NAT LPAREN INT EQ EOF END COLON BAR AS ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

"()" is an invalid expression.
"()" should have an expression in it to be an expression.

prog: LPAREN INT DARROW
##
## Ends in an error in state: 87.
##
## atomic_obj -> LPAREN obj . RPAREN [ ZERO VAR TYPE RPAREN RETURN RANGLE NAT LPAREN INT EQ EOF END COLON BAR AS ]
##
## The known suffix of the stack is as follows:
## LPAREN obj
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 29, spurious reduction of production eq_obj -> app_obj
## In state 27, spurious reduction of production obj -> eq_obj
##

Either an expression or ")" is expected.
This token is invalid for the beginning of an expression.

prog: LAMBDA LPAREN VAR COLON INT DARROW
##
## Ends in an error in state: 21.
##
## param -> LPAREN VAR COLON obj . RPAREN [ LPAREN DEF ARROW ]
##
## The known suffix of the stack is as follows:
## LPAREN VAR COLON obj
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 29, spurious reduction of production eq_obj -> app_obj
## In state 27, spurious reduction of production obj -> eq_obj
##

Either an expression or ")" is expected.
This token is invalid for the beginning of an expression.

prog: LAMBDA LPAREN VAR COLON INT RPAREN ZERO
##
## Ends in an error in state: 24.
##
## obj -> fnbinder params . ARROW obj [ RPAREN RETURN RANGLE EOF END COLON BAR AS ]
## params -> params . param [ LPAREN ARROW ]
##
## The known suffix of the stack is as follows:
## fnbinder params
##

"->" or another parameter is expected after a list of parameters for "fun".

prog: LAMBDA LPAREN VAR COLON INT RPAREN ARROW RPAREN
##
## Ends in an error in state: 25.
##
## obj -> fnbinder params ARROW . obj [ RPAREN RETURN RANGLE EOF END COLON BAR AS ]
##
## The known suffix of the stack is as follows:
## fnbinder params ARROW
##

An expression is expected after "->".
This token is invalid for the beginning of an expression.

prog: REC INT DARROW
##
## Ends in an error in state: 47.
##
## obj -> REC obj . optional_as_nat RETURN VAR DOT obj BAR ZERO DARROW obj BAR SUCC VAR COMMA VAR DARROW obj END [ RPAREN RETURN RANGLE EOF END COLON BAR AS ]
## obj -> REC obj . AS LPAREN app_obj EQ LANGLE obj RANGLE app_obj RPAREN RETURN VAR VAR VAR DOT obj BAR REFL VAR DARROW obj END [ RPAREN RETURN RANGLE EOF END COLON BAR AS ]
##
## The known suffix of the stack is as follows:
## REC obj
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 29, spurious reduction of production eq_obj -> app_obj
## In state 27, spurious reduction of production obj -> eq_obj
##

Either an expression or "return" keyword is expected.
This token is invalid for the beginning of an expression.

prog: REC INT RETURN ZERO
##
## Ends in an error in state: 71.
##
## obj -> REC obj optional_as_nat RETURN . VAR DOT obj BAR ZERO DARROW obj BAR SUCC VAR COMMA VAR DARROW obj END [ RPAREN RETURN RANGLE EOF END COLON BAR AS ]
##
## The known suffix of the stack is as follows:
## REC obj optional_as_nat RETURN
##

A variable is expected for the motif of a natural number recursion.

prog: REC INT RETURN VAR ZERO
##
## Ends in an error in state: 72.
##
## obj -> REC obj optional_as_nat RETURN VAR . DOT obj BAR ZERO DARROW obj BAR SUCC VAR COMMA VAR DARROW obj END [ RPAREN RETURN RANGLE EOF END COLON BAR AS ]
##
## The known suffix of the stack is as follows:
## REC obj optional_as_nat RETURN VAR
##

"." is expected after the scrutinee name of the motif of a natural number recursion.

prog: REC INT RETURN VAR DOT RPAREN
##
## Ends in an error in state: 73.
##
## obj -> REC obj optional_as_nat RETURN VAR DOT . obj BAR ZERO DARROW obj BAR SUCC VAR COMMA VAR DARROW obj END [ RPAREN RETURN RANGLE EOF END COLON BAR AS ]
##
## The known suffix of the stack is as follows:
## REC obj optional_as_nat RETURN VAR DOT
##

An expression is expected for the motif of a natural number recursion.
This token is invalid for the beginning of an expression.

prog: REC INT RETURN VAR DOT INT DARROW
##
## Ends in an error in state: 74.
##
## obj -> REC obj optional_as_nat RETURN VAR DOT obj . BAR ZERO DARROW obj BAR SUCC VAR COMMA VAR DARROW obj END [ RPAREN RETURN RANGLE EOF END COLON BAR AS ]
##
## The known suffix of the stack is as follows:
## REC obj optional_as_nat RETURN VAR DOT obj
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 29, spurious reduction of production eq_obj -> app_obj
## In state 27, spurious reduction of production obj -> eq_obj
##

Either an expression or "|" is expected.
This token is invalid for the beginning of an expression.

prog: REC INT RETURN VAR DOT INT BAR VAR
##
## Ends in an error in state: 75.
##
## obj -> REC obj optional_as_nat RETURN VAR DOT obj BAR . ZERO DARROW obj BAR SUCC VAR COMMA VAR DARROW obj END [ RPAREN RETURN RANGLE EOF END COLON BAR AS ]
##
## The known suffix of the stack is as follows:
## REC obj optional_as_nat RETURN VAR DOT obj BAR
##

The "zero" pattern is expected for the first branch of the natural number recursion.

prog: REC INT RETURN VAR DOT INT BAR ZERO ZERO
##
## Ends in an error in state: 76.
##
## obj -> REC obj optional_as_nat RETURN VAR DOT obj BAR ZERO . DARROW obj BAR SUCC VAR COMMA VAR DARROW obj END [ RPAREN RETURN RANGLE EOF END COLON BAR AS ]
##
## The known suffix of the stack is as follows:
## REC obj optional_as_nat RETURN VAR DOT obj BAR ZERO
##

"=>" is expected after a pattern.

prog: REC INT RETURN VAR DOT INT BAR ZERO DARROW RPAREN
##
## Ends in an error in state: 77.
##
## obj -> REC obj optional_as_nat RETURN VAR DOT obj BAR ZERO DARROW . obj BAR SUCC VAR COMMA VAR DARROW obj END [ RPAREN RETURN RANGLE EOF END COLON BAR AS ]
##
## The known suffix of the stack is as follows:
## REC obj optional_as_nat RETURN VAR DOT obj BAR ZERO DARROW
##

An expression is expected.
This token is invalid for the beginning of an expression.

prog: REC INT RETURN VAR DOT INT BAR ZERO DARROW INT DARROW
##
## Ends in an error in state: 78.
##
## obj -> REC obj optional_as_nat RETURN VAR DOT obj BAR ZERO DARROW obj . BAR SUCC VAR COMMA VAR DARROW obj END [ RPAREN RETURN RANGLE EOF END COLON BAR AS ]
##
## The known suffix of the stack is as follows:
## REC obj optional_as_nat RETURN VAR DOT obj BAR ZERO DARROW obj
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 29, spurious reduction of production eq_obj -> app_obj
## In state 27, spurious reduction of production obj -> eq_obj
##

Either an expression or "|" is expected.
This token is invalid for the beginning of an expression.

prog: REC INT RETURN VAR DOT INT BAR ZERO DARROW INT BAR ZERO
##
## Ends in an error in state: 79.
##
## obj -> REC obj optional_as_nat RETURN VAR DOT obj BAR ZERO DARROW obj BAR . SUCC VAR COMMA VAR DARROW obj END [ RPAREN RETURN RANGLE EOF END COLON BAR AS ]
##
## The known suffix of the stack is as follows:
## REC obj optional_as_nat RETURN VAR DOT obj BAR ZERO DARROW obj BAR
##

The "succ" pattern is expected for the second branch of the natural number recursion.

prog: REC INT RETURN VAR DOT INT BAR ZERO DARROW INT BAR SUCC ZERO
##
## Ends in an error in state: 80.
##
## obj -> REC obj optional_as_nat RETURN VAR DOT obj BAR ZERO DARROW obj BAR SUCC . VAR COMMA VAR DARROW obj END [ RPAREN RETURN RANGLE EOF END COLON BAR AS ]
##
## The known suffix of the stack is as follows:
## REC obj optional_as_nat RETURN VAR DOT obj BAR ZERO DARROW obj BAR SUCC
##

Two comma-separated pattern variables are expected for the "succ" pattern.

prog: REC INT RETURN VAR DOT INT BAR ZERO DARROW INT BAR SUCC VAR ZERO
##
## Ends in an error in state: 81.
##
## obj -> REC obj optional_as_nat RETURN VAR DOT obj BAR ZERO DARROW obj BAR SUCC VAR . COMMA VAR DARROW obj END [ RPAREN RETURN RANGLE EOF END COLON BAR AS ]
##
## The known suffix of the stack is as follows:
## REC obj optional_as_nat RETURN VAR DOT obj BAR ZERO DARROW obj BAR SUCC VAR
##

"," is expected after "succ ?x".

prog: REC INT RETURN VAR DOT INT BAR ZERO DARROW INT BAR SUCC VAR COMMA ZERO
##
## Ends in an error in state: 82.
##
## obj -> REC obj optional_as_nat RETURN VAR DOT obj BAR ZERO DARROW obj BAR SUCC VAR COMMA . VAR DARROW obj END [ RPAREN RETURN RANGLE EOF END COLON BAR AS ]
##
## The known suffix of the stack is as follows:
## REC obj optional_as_nat RETURN VAR DOT obj BAR ZERO DARROW obj BAR SUCC VAR COMMA
##

An identifier for the recursion result is expected.

prog: REC INT RETURN VAR DOT INT BAR ZERO DARROW INT BAR SUCC VAR COMMA VAR ZERO
##
## Ends in an error in state: 83.
##
## obj -> REC obj optional_as_nat RETURN VAR DOT obj BAR ZERO DARROW obj BAR SUCC VAR COMMA VAR . DARROW obj END [ RPAREN RETURN RANGLE EOF END COLON BAR AS ]
##
## The known suffix of the stack is as follows:
## REC obj optional_as_nat RETURN VAR DOT obj BAR ZERO DARROW obj BAR SUCC VAR COMMA VAR
##

"=>" is expected after a pattern.

prog: REC INT RETURN VAR DOT INT BAR ZERO DARROW INT BAR SUCC VAR COMMA VAR DARROW RPAREN
##
## Ends in an error in state: 84.
##
## obj -> REC obj optional_as_nat RETURN VAR DOT obj BAR ZERO DARROW obj BAR SUCC VAR COMMA VAR DARROW . obj END [ RPAREN RETURN RANGLE EOF END COLON BAR AS ]
##
## The known suffix of the stack is as follows:
## REC obj optional_as_nat RETURN VAR DOT obj BAR ZERO DARROW obj BAR SUCC VAR COMMA VAR DARROW
##

An expression is expected.
This token is invalid for the beginning of an expression.

prog: REC INT RETURN VAR DOT INT BAR ZERO DARROW INT BAR SUCC VAR COMMA VAR DARROW INT DARROW
##
## Ends in an error in state: 85.
##
## obj -> REC obj optional_as_nat RETURN VAR DOT obj BAR ZERO DARROW obj BAR SUCC VAR COMMA VAR DARROW obj . END [ RPAREN RETURN RANGLE EOF END COLON BAR AS ]
##
## The known suffix of the stack is as follows:
## REC obj optional_as_nat RETURN VAR DOT obj BAR ZERO DARROW obj BAR SUCC VAR COMMA VAR DARROW obj
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 29, spurious reduction of production eq_obj -> app_obj
## In state 27, spurious reduction of production obj -> eq_obj
##

Either an expression or "end" is expected.
This token is invalid for the beginning of an expression.

prog: INT DARROW
##
## Ends in an error in state: 91.
##
## prog -> obj . COLON obj EOF [ # ]
##
## The known suffix of the stack is as follows:
## obj
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 29, spurious reduction of production eq_obj -> app_obj
## In state 27, spurious reduction of production obj -> eq_obj
##

Either an expression or ":" is expected.
This token is invalid for the beginning of an expression.

prog: INT COLON RPAREN
##
## Ends in an error in state: 92.
##
## prog -> obj COLON . obj EOF [ # ]
##
## The known suffix of the stack is as follows:
## obj COLON
##

An expression is expected.
This token is invalid for the beginning of an expression.

prog: LET ZERO
##
## Ends in an error in state: 15.
##
## obj -> LET . let_defns IN obj [ RPAREN RETURN RANGLE EOF END COLON BAR AS ]
##
## The known suffix of the stack is as follows:
## LET
##

At least one variable binding is expected after a "let"

prog: LET LPAREN ZERO
##
## Ends in an error in state: 16.
##
## let_defn -> LPAREN . param DEF obj RPAREN [ LPAREN IN ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

A variable "(x : ?A)" is expected after "let (", where "?A" is a type.

prog: LET LPAREN LPAREN VAR COLON INT RPAREN ZERO
##
## Ends in an error in state: 38.
##
## let_defn -> LPAREN param . DEF obj RPAREN [ LPAREN IN ]
##
## The known suffix of the stack is as follows:
## LPAREN param
##

Expected symbol ":=".

prog: LET LPAREN LPAREN VAR COLON INT RPAREN DEF RPAREN
##
## Ends in an error in state: 39.
##
## let_defn -> LPAREN param DEF . obj RPAREN [ LPAREN IN ]
##
## The known suffix of the stack is as follows:
## LPAREN param DEF
##

Expected a value for the variable.

prog: LET LPAREN LPAREN VAR COLON INT RPAREN DEF INT SUCC
##
## Ends in an error in state: 40.
##
## let_defn -> LPAREN param DEF obj . RPAREN [ LPAREN IN ]
##
## The known suffix of the stack is as follows:
## LPAREN param DEF obj
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 29, spurious reduction of production eq_obj -> app_obj
## In state 27, spurious reduction of production obj -> eq_obj
##

Expected ")".

prog: LET LPAREN LPAREN VAR COLON INT RPAREN DEF INT RPAREN ZERO
##
## Ends in an error in state: 42.
##
## let_defns -> let_defns . let_defn [ LPAREN IN ]
## obj -> LET let_defns . IN obj [ RPAREN RETURN RANGLE EOF END COLON BAR AS ]
##
## The known suffix of the stack is as follows:
## LET let_defns
##

Expected keyword "in".

prog: LET LPAREN LPAREN VAR COLON INT RPAREN DEF INT RPAREN IN RPAREN
##
## Ends in an error in state: 43.
##
## obj -> LET let_defns IN . obj [ RPAREN RETURN RANGLE EOF END COLON BAR AS ]
##
## The known suffix of the stack is as follows:
## LET let_defns IN
##

Expected an expression after "in".

prog: INT EQ ZERO
##
## Ends in an error in state: 30.
##
## eq_obj -> app_obj EQ . LANGLE obj RANGLE app_obj [ RPAREN RETURN RANGLE EOF END COLON BAR AS ]
##
## The known suffix of the stack is as follows:
## app_obj EQ
##

"<", a type, and ">" are expected for a propositional equality type.
This type between "<" and ">" is the type of LHS and RHS.

prog: INT EQ LANGLE RPAREN
##
## Ends in an error in state: 31.
##
## eq_obj -> app_obj EQ LANGLE . obj RANGLE app_obj [ RPAREN RETURN RANGLE EOF END COLON BAR AS ]
##
## The known suffix of the stack is as follows:
## app_obj EQ LANGLE
##

Expected an expression between "<" and ">".

prog: INT EQ LANGLE INT SUCC
##
## Ends in an error in state: 32.
##
## eq_obj -> app_obj EQ LANGLE obj . RANGLE app_obj [ RPAREN RETURN RANGLE EOF END COLON BAR AS ]
##
## The known suffix of the stack is as follows:
## app_obj EQ LANGLE obj
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 29, spurious reduction of production eq_obj -> app_obj
## In state 27, spurious reduction of production obj -> eq_obj
##

Expected ">" after a type for a propositional equality type.

prog: INT EQ LANGLE INT RANGLE SUCC
##
## Ends in an error in state: 33.
##
## eq_obj -> app_obj EQ LANGLE obj RANGLE . app_obj [ RPAREN RETURN RANGLE EOF END COLON BAR AS ]
##
## The known suffix of the stack is as follows:
## app_obj EQ LANGLE obj RANGLE
##

Expected RHS for a propositional equality type.

prog: REC INT AS ZERO
##
## Ends in an error in state: 48.
##
## obj -> REC obj AS . LPAREN app_obj EQ LANGLE obj RANGLE app_obj RPAREN RETURN VAR VAR VAR DOT obj BAR REFL VAR DARROW obj END [ RPAREN RETURN RANGLE EOF END COLON BAR AS ]
## optional_as_nat -> AS . NAT [ RETURN ]
##
## The known suffix of the stack is as follows:
## REC obj AS
##

Expected "(" for the scrutinee type of a propositional equality recursion.

prog: REC INT AS LPAREN SUCC
##
## Ends in an error in state: 50.
##
## obj -> REC obj AS LPAREN . app_obj EQ LANGLE obj RANGLE app_obj RPAREN RETURN VAR VAR VAR DOT obj BAR REFL VAR DARROW obj END [ RPAREN RETURN RANGLE EOF END COLON BAR AS ]
##
## The known suffix of the stack is as follows:
## REC obj AS LPAREN
##

Expected LHS for the scrutinee type of a propositional equality recursion.

prog: REC INT AS LPAREN INT SUCC
##
## Ends in an error in state: 51.
##
## app_obj -> app_obj . atomic_obj [ ZERO VAR TYPE NAT LPAREN INT EQ ]
## obj -> REC obj AS LPAREN app_obj . EQ LANGLE obj RANGLE app_obj RPAREN RETURN VAR VAR VAR DOT obj BAR REFL VAR DARROW obj END [ RPAREN RETURN RANGLE EOF END COLON BAR AS ]
##
## The known suffix of the stack is as follows:
## REC obj AS LPAREN app_obj
##

Either an expression or "=" after LHS for the scrutinee type of a propositional equality recursion is expected.

prog: REC INT AS LPAREN INT EQ ZERO
##
## Ends in an error in state: 52.
##
## obj -> REC obj AS LPAREN app_obj EQ . LANGLE obj RANGLE app_obj RPAREN RETURN VAR VAR VAR DOT obj BAR REFL VAR DARROW obj END [ RPAREN RETURN RANGLE EOF END COLON BAR AS ]
##
## The known suffix of the stack is as follows:
## REC obj AS LPAREN app_obj EQ
##

"<", a type, and ">" are expected for a propositional equality type.
This type between "<" and ">" is the type of LHS and RHS.

prog: REC INT AS LPAREN INT EQ LANGLE RPAREN
##
## Ends in an error in state: 53.
##
## obj -> REC obj AS LPAREN app_obj EQ LANGLE . obj RANGLE app_obj RPAREN RETURN VAR VAR VAR DOT obj BAR REFL VAR DARROW obj END [ RPAREN RETURN RANGLE EOF END COLON BAR AS ]
##
## The known suffix of the stack is as follows:
## REC obj AS LPAREN app_obj EQ LANGLE
##

Expected an expression between "<" and ">".

prog: REC INT AS LPAREN INT EQ LANGLE INT SUCC
##
## Ends in an error in state: 54.
##
## obj -> REC obj AS LPAREN app_obj EQ LANGLE obj . RANGLE app_obj RPAREN RETURN VAR VAR VAR DOT obj BAR REFL VAR DARROW obj END [ RPAREN RETURN RANGLE EOF END COLON BAR AS ]
##
## The known suffix of the stack is as follows:
## REC obj AS LPAREN app_obj EQ LANGLE obj
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 29, spurious reduction of production eq_obj -> app_obj
## In state 27, spurious reduction of production obj -> eq_obj
##

Expected ">" after a type for a propositional equality type.

prog: REC INT AS LPAREN INT EQ LANGLE INT RANGLE SUCC
##
## Ends in an error in state: 55.
##
## obj -> REC obj AS LPAREN app_obj EQ LANGLE obj RANGLE . app_obj RPAREN RETURN VAR VAR VAR DOT obj BAR REFL VAR DARROW obj END [ RPAREN RETURN RANGLE EOF END COLON BAR AS ]
##
## The known suffix of the stack is as follows:
## REC obj AS LPAREN app_obj EQ LANGLE obj RANGLE
##

Expected RHS for the scrutinee type of a propositional equality recursion.

prog: REC INT AS LPAREN INT EQ LANGLE INT RANGLE INT SUCC
##
## Ends in an error in state: 56.
##
## app_obj -> app_obj . atomic_obj [ ZERO VAR TYPE RPAREN NAT LPAREN INT ]
## obj -> REC obj AS LPAREN app_obj EQ LANGLE obj RANGLE app_obj . RPAREN RETURN VAR VAR VAR DOT obj BAR REFL VAR DARROW obj END [ RPAREN RETURN RANGLE EOF END COLON BAR AS ]
##
## The known suffix of the stack is as follows:
## REC obj AS LPAREN app_obj EQ LANGLE obj RANGLE app_obj
##

Either an expression or ")" after RHS for the scrutinee type of a propositional equality recursion is expected.

prog: REC INT AS LPAREN INT EQ LANGLE INT RANGLE INT RPAREN ZERO
##
## Ends in an error in state: 57.
##
## obj -> REC obj AS LPAREN app_obj EQ LANGLE obj RANGLE app_obj RPAREN . RETURN VAR VAR VAR DOT obj BAR REFL VAR DARROW obj END [ RPAREN RETURN RANGLE EOF END COLON BAR AS ]
##
## The known suffix of the stack is as follows:
## REC obj AS LPAREN app_obj EQ LANGLE obj RANGLE app_obj RPAREN
##

"return" keyword is expected.

prog: REC INT AS LPAREN INT EQ LANGLE INT RANGLE INT RPAREN RETURN ZERO
##
## Ends in an error in state: 58.
##
## obj -> REC obj AS LPAREN app_obj EQ LANGLE obj RANGLE app_obj RPAREN RETURN . VAR VAR VAR DOT obj BAR REFL VAR DARROW obj END [ RPAREN RETURN RANGLE EOF END COLON BAR AS ]
##
## The known suffix of the stack is as follows:
## REC obj AS LPAREN app_obj EQ LANGLE obj RANGLE app_obj RPAREN RETURN
##

Three variables are expected for the motif of a propositional equality recursion.

prog: REC INT AS LPAREN INT EQ LANGLE INT RANGLE INT RPAREN RETURN VAR ZERO
##
## Ends in an error in state: 59.
##
## obj -> REC obj AS LPAREN app_obj EQ LANGLE obj RANGLE app_obj RPAREN RETURN VAR . VAR VAR DOT obj BAR REFL VAR DARROW obj END [ RPAREN RETURN RANGLE EOF END COLON BAR AS ]
##
## The known suffix of the stack is as follows:
## REC obj AS LPAREN app_obj EQ LANGLE obj RANGLE app_obj RPAREN RETURN VAR
##

Two more identifiers are expected for the motif of a propositional equality recursion.

prog: REC INT AS LPAREN INT EQ LANGLE INT RANGLE INT RPAREN RETURN VAR VAR ZERO
##
## Ends in an error in state: 60.
##
## obj -> REC obj AS LPAREN app_obj EQ LANGLE obj RANGLE app_obj RPAREN RETURN VAR VAR . VAR DOT obj BAR REFL VAR DARROW obj END [ RPAREN RETURN RANGLE EOF END COLON BAR AS ]
##
## The known suffix of the stack is as follows:
## REC obj AS LPAREN app_obj EQ LANGLE obj RANGLE app_obj RPAREN RETURN VAR VAR
##

One more identifier is expected for the motif of a propositional equality recursion.

prog: REC INT AS LPAREN INT EQ LANGLE INT RANGLE INT RPAREN RETURN VAR VAR VAR ZERO
##
## Ends in an error in state: 61.
##
## obj -> REC obj AS LPAREN app_obj EQ LANGLE obj RANGLE app_obj RPAREN RETURN VAR VAR VAR . DOT obj BAR REFL VAR DARROW obj END [ RPAREN RETURN RANGLE EOF END COLON BAR AS ]
##
## The known suffix of the stack is as follows:
## REC obj AS LPAREN app_obj EQ LANGLE obj RANGLE app_obj RPAREN RETURN VAR VAR VAR
##

"." is expected after the scrutinee name of the motif of a propositional equality recursion.

prog: REC INT AS LPAREN INT EQ LANGLE INT RANGLE INT RPAREN RETURN VAR VAR VAR DOT RPAREN
##
## Ends in an error in state: 62.
##
## obj -> REC obj AS LPAREN app_obj EQ LANGLE obj RANGLE app_obj RPAREN RETURN VAR VAR VAR DOT . obj BAR REFL VAR DARROW obj END [ RPAREN RETURN RANGLE EOF END COLON BAR AS ]
##
## The known suffix of the stack is as follows:
## REC obj AS LPAREN app_obj EQ LANGLE obj RANGLE app_obj RPAREN RETURN VAR VAR VAR DOT
##

An expression is expected for the motif of a propositional equality recursion.
This token is invalid for the beginning of an expression.

prog: REC INT AS LPAREN INT EQ LANGLE INT RANGLE INT RPAREN RETURN VAR VAR VAR DOT INT SUCC
##
## Ends in an error in state: 63.
##
## obj -> REC obj AS LPAREN app_obj EQ LANGLE obj RANGLE app_obj RPAREN RETURN VAR VAR VAR DOT obj . BAR REFL VAR DARROW obj END [ RPAREN RETURN RANGLE EOF END COLON BAR AS ]
##
## The known suffix of the stack is as follows:
## REC obj AS LPAREN app_obj EQ LANGLE obj RANGLE app_obj RPAREN RETURN VAR VAR VAR DOT obj
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 29, spurious reduction of production eq_obj -> app_obj
## In state 27, spurious reduction of production obj -> eq_obj
##

Either an expression or "|" is expected.
This token is invalid for the beginning of an expression.

prog: REC INT AS LPAREN INT EQ LANGLE INT RANGLE INT RPAREN RETURN VAR VAR VAR DOT INT BAR ZERO
##
## Ends in an error in state: 64.
##
## obj -> REC obj AS LPAREN app_obj EQ LANGLE obj RANGLE app_obj RPAREN RETURN VAR VAR VAR DOT obj BAR . REFL VAR DARROW obj END [ RPAREN RETURN RANGLE EOF END COLON BAR AS ]
##
## The known suffix of the stack is as follows:
## REC obj AS LPAREN app_obj EQ LANGLE obj RANGLE app_obj RPAREN RETURN VAR VAR VAR DOT obj BAR
##

The "refl" pattern is expected for the branch of a propositional equality recursion.

prog: REC INT AS LPAREN INT EQ LANGLE INT RANGLE INT RPAREN RETURN VAR VAR VAR DOT INT BAR REFL ZERO
##
## Ends in an error in state: 65.
##
## obj -> REC obj AS LPAREN app_obj EQ LANGLE obj RANGLE app_obj RPAREN RETURN VAR VAR VAR DOT obj BAR REFL . VAR DARROW obj END [ RPAREN RETURN RANGLE EOF END COLON BAR AS ]
##
## The known suffix of the stack is as follows:
## REC obj AS LPAREN app_obj EQ LANGLE obj RANGLE app_obj RPAREN RETURN VAR VAR VAR DOT obj BAR REFL
##

A pattern variable is expected for the "refl" pattern.

prog: REC INT AS LPAREN INT EQ LANGLE INT RANGLE INT RPAREN RETURN VAR VAR VAR DOT INT BAR REFL VAR ZERO
##
## Ends in an error in state: 66.
##
## obj -> REC obj AS LPAREN app_obj EQ LANGLE obj RANGLE app_obj RPAREN RETURN VAR VAR VAR DOT obj BAR REFL VAR . DARROW obj END [ RPAREN RETURN RANGLE EOF END COLON BAR AS ]
##
## The known suffix of the stack is as follows:
## REC obj AS LPAREN app_obj EQ LANGLE obj RANGLE app_obj RPAREN RETURN VAR VAR VAR DOT obj BAR REFL VAR
##

"=>" is expected after a pattern.

prog: REC INT AS LPAREN INT EQ LANGLE INT RANGLE INT RPAREN RETURN VAR VAR VAR DOT INT BAR REFL VAR DARROW RPAREN
##
## Ends in an error in state: 67.
##
## obj -> REC obj AS LPAREN app_obj EQ LANGLE obj RANGLE app_obj RPAREN RETURN VAR VAR VAR DOT obj BAR REFL VAR DARROW . obj END [ RPAREN RETURN RANGLE EOF END COLON BAR AS ]
##
## The known suffix of the stack is as follows:
## REC obj AS LPAREN app_obj EQ LANGLE obj RANGLE app_obj RPAREN RETURN VAR VAR VAR DOT obj BAR REFL VAR DARROW
##

An expression is expected.
This token is invalid for the beginning of an expression.

prog: REC INT AS LPAREN INT EQ LANGLE INT RANGLE INT RPAREN RETURN VAR VAR VAR DOT INT BAR REFL VAR DARROW INT SUCC
##
## Ends in an error in state: 68.
##
## obj -> REC obj AS LPAREN app_obj EQ LANGLE obj RANGLE app_obj RPAREN RETURN VAR VAR VAR DOT obj BAR REFL VAR DARROW obj . END [ RPAREN RETURN RANGLE EOF END COLON BAR AS ]
##
## The known suffix of the stack is as follows:
## REC obj AS LPAREN app_obj EQ LANGLE obj RANGLE app_obj RPAREN RETURN VAR VAR VAR DOT obj BAR REFL VAR DARROW obj
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 29, spurious reduction of production eq_obj -> app_obj
## In state 27, spurious reduction of production obj -> eq_obj
##

Either an expression or "end" is expected.
This token is invalid for the beginning of an expression.

prog: REC INT AS NAT ZERO
##
## Ends in an error in state: 70.
##
## obj -> REC obj optional_as_nat . RETURN VAR DOT obj BAR ZERO DARROW obj BAR SUCC VAR COMMA VAR DARROW obj END [ RPAREN RETURN RANGLE EOF END COLON BAR AS ]
##
## The known suffix of the stack is as follows:
## REC obj optional_as_nat
##

"return" keyword is expected.

prog: REFL SUCC
##
## Ends in an error in state: 9.
##
## obj -> REFL . atomic_obj atomic_obj [ RPAREN RETURN RANGLE EOF END COLON BAR AS ]
##
## The known suffix of the stack is as follows:
## REFL
##

An expression is expected.

prog: REFL INT SUCC
##
## Ends in an error in state: 11.
##
## obj -> REFL atomic_obj . atomic_obj [ RPAREN RETURN RANGLE EOF END COLON BAR AS ]
##
## The known suffix of the stack is as follows:
## REFL atomic_obj
##

An expression is expected.
